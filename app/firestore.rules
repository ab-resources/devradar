service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{user} {
     	allow get: if true;
      allow list: if hasRole('admin');
      allow write: if isUserObject(request.resource.data) && (request.auth.uid == user || hasRole('admin'));
    }
    match /roles/{user} {
      allow get: if true;
      allow list: if hasRole('admin');
      allow write: if hasRole('admin');
    }

    match /radars/{radar} {
      allow get: if isReadable(radar);
      allow list: if request.query.limit <= 10 && isReadable(radar);
			allow create: if isRadarObject(request.resource.data) && isSignedIn();
      allow update, delete: if isRadarObject(request.resource.data) && (isOwner(radar) || hasRole('admin'));
    }
    match /radars/{radar}/blips/{blip} {
      allow get: if isReadable(radar);
      allow list: if request.query.limit <= 100 && isReadable(radar);
      allow create, update: if isBlipObject(request.resource.data) && (isOwner(radar) || hasRole('admin'));
      allow delete: if isOwner(radar) || hasRole('admin');
    }

    match /radarAliases/{user} {
      allow get: if true;
      allow list: if request.query.limit <= 10;
      allow write: if request.auth.uid == user || hasRole('admin');
    }
    
    /* helper functions */
    function isSignedIn() {
      return request.auth != null;
    }    
    function getRoles() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data
    }
    function hasRole(role) {
      return isSignedIn() && getRoles()[role] == true;
    }
    function hasAnyRole(roles) {
      return isSignedIn() && getRoles().keys().hasAny(roles);
    }
    function isPublic(radar) {
      return get(/databases/$(database)/documents/radars/$(radar)).data.isPublic == true
    }
    function isOwner(radar) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/radars/$(radar)).data.owner
    }
    function isReadable(radar) {
      return isOwner(radar) || isPublic(radar) || request.auth.uid in get(/databases/$(database)/documents/radars/$(radar)).data.readers
    }

    function isUserObject(data) {
      return data.size() == 6 &&
        data.keys().hasOnly(['uid', 'name', 'displayName', 'lastLogin', 'email', 'radar']) &&
        data.name is string &&
        data.displayName is string &&
        data.lastLogin is string &&
        data.email is string &&
        data.radar is string;
    }
    function isRadarObject(data) {
      return data.keys().hasOnly(['blips', 'categories', 'levels', 'owner', 'readers', 'isPublic'])
    }
    function isBlipObject(data) {
      return data.keys().hasOnly(['title', 'category', 'link', 'changes', 'description']) &&
        data.title is string &&
        data.category is number &&
        data.link is string &&
        data.description is string &&
        data.changes is list;
    }
  }
}